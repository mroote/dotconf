alias tmux='tmux -2 new-session -A -s main'
alias k="kubectl"
alias python="/usr/bin/python3"

# If neovim installed use it
if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CFl'

# Find aliases
alias ff="find . -type f -name"
alias fr="find . -type f -regex"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias sshup='eval `ssh-agent -s` && ssh-add'

# Run screen locker
alias lock-screen='. ~/bin/lock.sh'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias xdg-runtime='export XDG_RUNTIME_DIR=/run/user/$(id -u)'

#  Add config command for local conf files.
#  This Alias allows adding and editing config files for each computer
#  Each computer can get a new branch
#
#  To Create:
#    git init --bare $HOME/.myconf
#    config config status.showUntrackedFiles no
#  To Clone:
#    git init --bare $HOME/.myconf
#    git --git-dir=$HOME/.myconf remote add origin https://git.r00t.ca/mitch/dotconf.git
#    git --git-dir=$HOME/.myconf fetch
#    git --git-dir=$HOME/.myconf --work-tree=$HOME checkout firefly
#  Ex:
#    config status
#    config add .vimrc
#    config commit -m "Add vimrc"
#    config add .config/redshift.conf
#    config commit -m "Add redshift config"
#    config push
alias config='/usr/bin/git --git-dir=$HOME/.myconf/ --work-tree=$HOME'

initnvm() {
    # Source nvm
    export NVM_DIR="/home/mitch/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

# Generate alphanumeric random string, supply length as parameter, default length if 15
genpasswd() {
   local l=$1
   [ -z $l ] && l=15
   tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

kill_tmux() {
    w | awk '/\:0/ && /tmux -2/ {print $2}' | xargs -0 -I {} sh -c "ps aux | awk '/tmux/ && /pts\/3/'" | awk '{print $2}' | xargs kill
}

# Some useful aliases borrowed from: https://github.com/jessfraz/dotfiles
# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Run `dig` and display the most useful info
digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Use feh to nicely view images
openimage() {
	local file
	file=$(basename "$1")

	feh -q --auto-zoom \
	       --sort filename --borderless \
	       --scale-down --draw-filename \
	       --image-bg black \
	       "${file}"
}

powerusage() {
    awk '{print $1*10^-6 " W"}' /sys/class/power_supply/BAT1/power_now
}

rmsubmodule() {
	if [ -z "${1}" ]; then
		echo "ERROR: No Git submodule specified."
		return 1
	fi

    local submodule_name="$(echo -e "$1" | sed 's/\/$//')"
    echo "Removing submodule ${submodule_name}..\n"

    if config submodule status "$submodule_name" >/dev/null 2>&1; then
        config submodule deinit -f "$submodule_name"
        config rm -f "$submodule_name"
        config config -f .gitmodules --remove-section "submodule.$submodule_name"
    fi
}

list_path() {
    for dir in `echo $PATH | sed 's/:/ /g'`
    do
        echo Listing dir: $dir
        ls -l $dir | nl
    done | less
}

wait_for_port() {
	if [ -z "${1}" ]; then
		echo "ERROR: No IP specified."
		return 1
	fi

	if [ -z "${2}" ]; then
		echo "ERROR: No port specified."
		return 1
	fi

    local ip="${1}"
    local port="${2}"

    while [ $(nc -z -w1 "$ip" "$port" &> /dev/null; echo $?) -gt 0 ] ; do
        echo "Waiting for $ip:$port..."
        sleep 2
    done

    # ports listen before service is actually running so wait a bit
    echo "Connected to $ip:$port..." && sleep 5
    return 0
}

function archnews {
    # Arch latest news
    if [ "$PS1" ] && [[ $(ping -c1 www.archlinux.org 2>&-) ]]; then
        # The characters "£, §" are used as metacharacters. They should not be encountered in a feed...
        echo -e "$(echo $(curl --silent https://archlinux.org/feeds/news/ | awk ' NR == 1 {while ($0 !~ /<\/item>/) {print;getline} sub(/<\/item>.*/,"</item>") ;print}' | sed -e ':a;N;$!ba;s/\n/ /g') | \
            sed -e 's/&amp;/\&/g
            s/&lt;\|&#60;/</g
            s/&gt;\|&#62;/>/g
            s/<\/a>/£/g
            s/href\=\"/§/g
            s/<title>/\\n\\n\\n   :: \\e[01;31m/g; s/<\/title>/\\e[00m ::\\n/g
            s/<link>/ [ \\e[01;36m/g; s/<\/link>/\\e[00m ]/g
            s/<description>/\\n\\n\\e[00;37m/g; s/<\/description>/\\e[00m\\n\\n/g
            s/<p\( [^>]*\)\?>\|<br\s*\/\?>/\n/g
            s/<b\( [^>]*\)\?>\|<strong\( [^>]*\)\?>/\\e[01;30m/g; s/<\/b>\|<\/strong>/\\e[00;37m/g
            s/<i\( [^>]*\)\?>\|<em\( [^>]*\)\?>/\\e[41;37m/g; s/<\/i>\|<\/em>/\\e[00;37m/g
            s/<u\( [^>]*\)\?>/\\e[4;37m/g; s/<\/u>/\\e[00;37m/g
            s/<code\( [^>]*\)\?>/\\e[00m/g; s/<\/code>/\\e[00;37m/g
            s/<a[^§|t]*§\([^\"]*\)\"[^>]*>\([^£]*\)[^£]*£/\\e[01;31m\2\\e[00;37m \\e[01;34m[\\e[00;37m \\e[04m\1\\e[00;37m\\e[01;34m ]\\e[00;37m/g
            s/<li\( [^>]*\)\?>/\n \\e[01;34m*\\e[00;37m /g
            s/<!\[CDATA\[\|\]\]>//g
            s/\|>\s*<//g
            s/ *<[^>]\+> */ /g
            s/[<>£§]//g')\n\n";
    else
        echo "Unable to reach the internet"
    fi
}

fjq() {
   local filename=$1
   echo '' | fzf --preview 'jq {q} < ${filename}'  
}
